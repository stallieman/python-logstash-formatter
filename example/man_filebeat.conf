input {
    beats {
        id => fingerprint {
            source => "message"
            target => "[@metadata][fingerprint]"
            method => "SHA1"
        }
        de_dot { nested => "true" }
        port => 5048
    }
}

filter {
    # ======================= LOGSTASH LOGS =========================
    if "logstashplainlog" in [tags] or "logstashpipelinelog" in [tags] {
        grok {
            match => { "message" =>
                "\[%{TIMESTAMP_ISO8601:timestamp}\]\[%{LOGLEVEL:log.level}\s*\]\[%{DATA:logger}\]\s+
                %{GREEDYDATA:log.message}" }
        }
        mutate {
            gsub => [ "timestamp", ",", "." ]
        }
        if "Pipeline terminated" in [log.message] {
            mutate {
                update => { "log.level" => "CRITICAL" }
            }
        }
    }
    # ======================= externalip ============================
    else if "externalip" in [tags] {
        json { source => "message" }
        date {
            match => [ "[TimeStamp]", "yyyy-MM-dd HH:mm:ss.S Z", "ISO8601" ]
            timezone => "Europe/Amsterdam"
        }
        mutate {
            rename => { "domain" => "domain.netbios" }
            rename => { "domain.code" => "beat.domain.code" }
            rename => { "domain.dns" => "beat.domain.dns" }
        }
        fingerprint {
            source => "message"
            target => "[@metadata][fingerprint]"
            method => "SHA1"
        }
        de_dot { nested => "true" }
    }
    # ======================= citrixlicense =========================
    else if "citrixlicense" in [tags] {
        csv {
            id => "CSV"
            columns => ["License.Type", "Product", "Count", "InUseCount", "PercentageUsed",
            "PSShowComputerName", "Domain.Name", "Server.FQDN", "PSComputerName", "RunspaceId",
            "Date"]
        }
        if "#TYPE" in [message] { drop {} }
        if '"PLD",' in [message] { drop {} }
        date {
            match => ["Date", "d-M-yyyy HH:mm:ss"]
            timezone => "Europe/Amsterdam"
        }
        fingerprint {
            source => "message"
            target => "[@metadata][fingerprint]"
            method => "SHA1"
        }
        mutate {
            convert => { "PSShowComputerName" => "boolean" }
        }
    }
    # ======================= softwareinventory =====================
    else if "softwareinventory" in [tags] {
        json { source => "message" }
        mutate {
            rename => { "ComputerName" => "Machine.Name" }
            rename => { "CustomerCode" => "Company.Code" }
            rename => { "NetBios" => "Domain.NetBios" }
            rename => { "DisplayName" => "Software.Name" }
            rename => { "DisplayVersion" => "Software.Version" }
            rename => { "Publisher" => "Software.Publisher" }
            rename => { "Edition" => "Software.Edition" }
            remove_field => ["[input][type]"]
        }
        if [Software.Edition] == "" { mutate { remove_field => ["Software.Edition"] } }
        grok {
            match => ["[log][file][path]",
            "%{YEAR:year}%{MONTHNUM2:month}%{MONTHDAY:day}%{HOUR:hour}%{MINUTE:minute}"]
        }
        mutate {
            add_field => {"[@metadata][temptimestamp]" =>
                "%{year}-%{month}-%{day} %{hour}:%{minute}"}
        }
        date {
            match => [ "DiscoveryDate", "yyyyMMdd" ]
            timezone => "Europe/Amsterdam"
        }
        date {
            match => [ "[@metadata][temptimestamp]", "yyyy-MM-dd HH:mm" ]
            timezone => "Europe/Amsterdam"
            target => "CreateFileDate"
        }
        date {
            match => [ "InstallDate", "yyyyMMdd" ]
            timezone => "Europe/Amsterdam"
            target => "Software.InstallDate"
        }
        fingerprint {
            source => "message"
            target => "[@metadata][fingerprint]"
            method => "SHA1"
        }
        de_dot { nested => "true" }
        mutate {
            remove_field => ["year", "month", "day", "hour", "minute", "DiscoveryDate",
            "InstallDate", "source", "[fields]"]
        }
    }
    # ======================= dfs =========================
    if "dfs" in [tags] {
        csv {
            id => "DFSDataCSV"
            columns => ["Path", "TargetPath", "State"]
            separator => ";"
            skip_header => true
            skip_empty_rows => true
        }
        grok {
            match => [
            "[log][file][path]",
            "%{YEAR:year}%{MONTHNUM2:month}%{MONTHDAY:day}%{HOUR:hour}%{MINUTE:minute}"
            ]
        }
        mutate {
            add_field => {
                "[@metadata][temptimestamp]" => "%{year}-%{month}-%{day} %{hour}:%{minute}"
            }
        }
        date {
            match => ["[@metadata][temptimestamp]", "yyyy-MM-dd HH:mm"]
            timezone => "Europe/Amsterdam"
        }
        grok {
            match => {
                "Path" =>
                '^\\\\(?<domain>[^\\]+)\\(?<companycode>[^-]+)-(?<role>[^\\$]+)\$\\(?<share>.+)$
                '
            }
            tag_on_failure => []
        }
        mutate {
            add_field => {
                "[Company][Code]" => "%{companycode}"
                "Role" => "%{role}"
                "Folder" => "%{share}"
            }
        }
        grok {
            match => [
            "TargetPath",
            "^\\\\%{DATA:fileserver}\\%{GREEDYDATA}"
            ]
        }
        mutate {
            split => ["fileserver", "."]
            add_field => {
                "Machine.Name" => "%{[fileserver][0]}"
            }
        }
        fingerprint {
            source => ["source", "message"]
            concatenate_sources => true
            target => "[@metadata][fingerprint]"
            method => "SHA1"
        }
        mutate {
            uppercase => ["[Company][Code]", "Machine.Name", "Folder", "Role"]
        }
        de_dot { nested => "true" }
        mutate {
            remove_field => [
            "year", "month", "day", "hour", "minute",
            "companycode", "role", "share", "fileserver"
            ]
        }
    }
    # ======================= rolefoldersize =========================
    else if "rolefoldersize" in [tags] {
        json { source => "message" }
        grok { match => ["Folder", "%{GREEDYDATA:fldr}"] }
        mutate { replace => { "Folder" => "%{fldr}" } }
        if "{fldr}" in [Folder] { mutate { remove_field => "Folder" } }
        else if [Folder] =~ /[\\]/ {
            grok { match => ["Folder", "%{GREEDYDATA:fldr2}\\%{GREEDYDATA:sbfldr}"] }
            mutate {
                replace => { "Folder" => "%{fldr2}" }
                add_field => { "SubFolder" => "%{sbfldr}" }
            }
        }
        if [sAMAccountName] == "null" { mutate { replace => {"sAMAccountName" => "" } } }
        mutate {
            rename => { "ComputerName" => "Machine.Name" }
            rename => { "CustomerCode" => "Company.Code" }
            remove_field => ["fldr", "fldr2", "sbfldr"]
        }
        grok {
            match => ["[log][file][path]",
            "%{YEAR:year}%{MONTHNUM2:month}%{MONTHDAY:day}%{HOUR:hour}%{MINUTE:minute}"]
        }
        mutate {
            add_field => {"[@metadata][temptimestamp]" =>
                "%{year}-%{month}-%{day} %{hour}:%{minute}"}
        }
        date {
            match => [ "[@metadata][temptimestamp]", "yyyy-MM-dd HH:mm" ]
            timezone => "Europe/Amsterdam"
        }
        fingerprint {
            source => "message"
            target => "[@metadata][fingerprint]"
            method => "SHA1"
        }
        de_dot { nested => "true" }
        mutate {
            remove_field => ["year", "month", "day", "hour", "minute"]
            add_field => { "Machine.Type" => "Server" }
            add_field => { "Server.Type" => "Fileserver" }
        }
    }
    # ======================= wsus =========================
    else if "wsus" in [tags] {
        json { source => "message" }
        if "Backend" in [log][file][path] { mutate { add_field => { "Machine.Category" => "Backend"}
            } }
        else { mutate { add_field => { "Machine.Category" => "Frontend"} } }
        mutate {
            rename => { "ComputerName" => "Machine.Name" }
            rename => { "OSProductName" => "OperatingSystem.Name" }
            rename => { "OSVersion" => "OperatingSystem.Version" }
        }
        if [Status] == "null" { mutate { replace => {"Status" => "" } } }
        grok {
            match => ["[log][file][path]",
            "%{YEAR:year}%{MONTHNUM2:month}%{MONTHDAY:day}%{HOUR:hour}%{MINUTE:minute}"]
        }
        mutate {
            add_field => {"[@metadata][temptimestamp]" =>
                "%{year}-%{month}-%{day} %{hour}:%{minute}"}
        }
        date {
            match => [ "[@metadata][temptimestamp]", "yyyy-MM-dd HH:mm" ]
            timezone => "Europe/Amsterdam"
        }
        fingerprint {
            source => ["source", "message"]
            concatenate_sources => true
            target => "[@metadata][fingerprint]"
            method => "SHA1"
        }
        de_dot { nested => "true" }
        mutate { remove_field => ["year", "month", "day", "hour", "minute"] }
    }
    # ======================= vss =========================
    else if "vss" in [tags] {
        csv {
            id => "VSSDataCSV"
            columns => ["Machine.Name", "Server.Volume.DriveLetter", "VSS.Volume.DriveLetter",
            "VSS.Volume.SizeInGB", "VSS.Latest", "VSS.Days", "VSS.Count", "Server.Roles.Name",
            "VSS.State"]
        }
        mutate {
            add_field => { "Machine.Type" => "Server" }
            add_field => { "Server.Type" => "Fileserver" }
        }
        if [Volume.DriveLetter] == "" { mutate { remove_field => ["Volume.DriveLetter"] } }
        if [VSS.Volume.DriveLetter] == "" { mutate { remove_field => ["VSS.Volume.DriveLetter"] } }
        if [VSS.Volume.SizeInGB] == "" { mutate { remove_field => ["VSS.Volume.SizeInGB"] } }
        if [VSS.Latest] == "" { mutate { remove_field => ["VSS.Latest"] } }
        if [VSS.Days] == "" { mutate { remove_field => ["VSS.Days"] } }
        if [VSS.Count] == "" { mutate { remove_field => ["VSS.Count"] } }
        if [VSS.State] == "SLANotOk" { mutate { replace => { "VSS.State" => "SLANotOK" } } }
        mutate { split => { "Server.Roles.Name" => "," } }
        grok {
            match => ["[log][file][path]",
            "%{YEAR:year}%{MONTHNUM2:month}%{MONTHDAY:day}%{HOUR:hour}%{MINUTE:minute}"]
        }
        mutate {
            add_field => {"[@metadata][temptimestamp]" =>
                "%{year}-%{month}-%{day} %{hour}:%{minute}"}
        }
        date {
            match => [ "[@metadata][temptimestamp]", "yyyy-MM-dd HH:mm" ]
            timezone => "Europe/Amsterdam"
        }
        fingerprint {
            source => "message"
            target => "[@metadata][fingerprint]"
            method => "SHA1"
        }
        de_dot { nested => "true" }
        mutate { remove_field => ["year", "month", "day", "hour", "minute"] }
    }
    # ======================= fsinventory =========================
    else if "fsinventory" in [tags] {
        json { source => "message" }
        mutate {
            add_field => { "Machine.Type" => "Server" }
            add_field => { "Server.Type" => "Fileserver" }
            uppercase => [ "DriveLetter" ]
        }
        mutate { gsub => [ "DriveLetter", "$", "\\ " ] }
        mutate { gsub => [ "DriveLetter", " ", "" ] }
        mutate {
            rename => { "DiskSize" => "Server.Volume.SizeInBytes" }
            rename => { "UsedSpace" => "Server.Volume.UsedSpaceInBytes" }
            rename => { "NumberOfShares" => "Server.Volume.Shares" }
            rename => { "Roles" => "Server.Roles" }
            rename => { "Roles.Name" => "Server.Roles.Name" }
            rename => { "Roles.RootDirCount" => "Server.Roles.RootDirCount" }
            rename => { "ComputerName" => "Machine.Name" }
            rename => { "DriveLetter" => "Server.Volume.DriveLetter" }
            rename => { "CustomerCode" => "Company.Code" }
        }
        grok {
            match => ["[log][file][path]",
            "%{YEAR:year}%{MONTHNUM2:month}%{MONTHDAY:day}%{HOUR:hour}%{MINUTE:minute}"]
        }
        mutate {
            add_field => {"[@metadata][temptimestamp]" =>
                "%{year}-%{month}-%{day} %{hour}:%{minute}"}
        }
        date {
            match => [ "[@metadata][temptimestamp]", "yyyy-MM-dd HH:mm" ]
            timezone => "Europe/Amsterdam"
        }
        fingerprint {
            source => "message"
            target => "[@metadata][fingerprint]"
            method => "SHA1"
        }
        de_dot { nested => "true" }
        mutate { remove_field => ["year", "month", "day", "hour", "minute"] }
    }
    # ======================= vmwareclustercapacity =========================
    else if "vmwareclustercapacity" in [tags] {
        csv {
            separator => ","
            autodetect_column_names => true
            autogenerate_column_names => true
        }
        if "Datacenter" in [message] { drop {} }
        if [vCPUPerPhysicalCPU] == "" { mutate { update => { "vCPUPerPhysicalCPU" => 0 } } }
        if [TotalVMMemory] == "" { mutate { update => { "TotalVMMemory" => 0 } } }
        if [TotalHosts] == "" { mutate { update => { "TotalHosts" => 0 } } }
        if [TotalHostCores] == "" { mutate { update => { "TotalHostCores" => 0 } } }
        if [TotalHostMemory] == "" { mutate { update => { "TotalHostMemory" => 0 } } }
        if [TotalVMs] == "" { mutate { update => { "TotalVMs" => 0 } } }
        if [TotalVMCores] == "" { mutate { update => { "TotalVMCores" => 0 } } }
        if [TotalMemoryAvailable] == "" { mutate { update => { "TotalMemoryAvailable" => 0 } } }
        if [TotalMemoryFree] == "" { mutate { update => { "TotalMemoryFree" => 0 } } }
        if [TotalUitwijkVMCores] == "" { mutate { update => { "TotalUitwijkVMCores" => 0 } } }
        if [TotalUitwijkVMMemory] == "" { mutate { update => { "TotalUitwijkVMMemory" => 0 } } }
        if [TotalMemoryFreeInclUitwijk] == "" { mutate { update => { "TotalMemoryFreeInclUitwijk" =>
                    0 } } }
        mutate {
            rename => { "Datacenter" => "Datacenter.Name" }
            rename => { "Cluster" => "VMCluster.Name" }
            convert => { "vCPUPerPhysicalCPU" => "float_eu" }
            convert => { "TotalVMMemory" => "integer_eu" }
            convert => { "TotalHosts" => "integer" }
            convert => { "TotalHostCores" => "integer" }
            convert => { "TotalHostMemory" => "integer" }
            convert => { "TotalVMs" => "integer" }
            convert => { "TotalVMCores" => "integer" }
            convert => { "TotalMemoryAvailable" => "integer" }
            convert => { "TotalMemoryFree" => "integer" }
            convert => { "TotalUitwijkVMCores" => "integer" }
            convert => { "TotalUitwijkVMMemory" => "integer" }
            convert => { "TotalMemoryFreeInclUitwijk" => "integer" }
        }
        de_dot { nested => "true" }
    }
    # ======================= ntfsrights =========================
    else if "ntfsrights" in [tags] {
        json { source => "message" }
        grok { match => ["Path", "%{DATA}:\\%{DATA}\\%{DATA}\\%{DATA}\\%{GREEDYDATA:fldr}"] }
        mutate { add_field => { "Folder" => "%{fldr}" } }
        mutate {
            rename => { "ComputerName" => "Machine.Name" }
            rename => { "CustomerCode" => "Company.Code" }
            uppercase => [ "Company.Code" ]
            remove_field => ["fldr"]
        }
        if [SubFolder] == "null" { mutate { replace => {"SubFolder" => "" } } }
        grok {
            match => ["[log][file][path]",
            "%{YEAR:year}%{MONTHNUM2:month}%{MONTHDAY:day}%{HOUR:hour}%{MINUTE:minute}"]
        }
        mutate {
            add_field => {"[@metadata][temptimestamp]" =>
                "%{year}-%{month}-%{day} %{hour}:%{minute}"}
        }
        date {
            match => [ "[@metadata][temptimestamp]", "yyyy-MM-dd HH:mm" ]
            timezone => "Europe/Amsterdam"
        }
        fingerprint {
            source => "message"
            target => "[@metadata][fingerprint]"
            method => "SHA1"
        }
        de_dot { nested => "true" }
        mutate {
            remove_field => ["year", "month", "day", "hour", "minute"]
            add_field => { "Machine.Type" => "Server" }
            add_field => { "Server.Type" => "Fileserver" }
            convert => { "AccountsOnFolder" => "string" }
        }
    }
    # ======================= vmwarehostinfo =========================
    else if "vmwarehostinfo" in [tags] {
        json { source => "message" }
        date {
            match => [ "Measure.Timestamp", "yyyy-MM-dd HH:mm:ss" ]
            timezone => "Europe/Amsterdam"
        }
        mutate { remove_field => ["Measure.Timestamp"] }
        fingerprint {
            source => "message"
            target => "[@metadata][fingerprint]"
            method => "SHA1"
        }
        de_dot { nested => "true" }
    }
    # ======================= vmwarevminfo =========================
    else if "vmwarevminfo" in [tags] {
        json { source => "message" }
        date {
            match => [ "Measure.Timestamp", "yyyy-MM-dd HH:mm:ss" ]
            timezone => "Europe/Amsterdam"
        }
        mutate { remove_field => ["Measure.Timestamp"] }
        fingerprint {
            source => "message"
            target => "[@metadata][fingerprint]"
            method => "SHA1"
        }
        de_dot { nested => "true" }
    }
    # ======================= haveibeenguessed =========================
    else if "haveibeenguessed" in [tags] {
        json { source => "message" }
        fingerprint {
            source => "message"
            target => "[@metadata][fingerprint]"
            method => "SHA1"
        }
        de_dot { nested => "true" }
    }
    # ======================= chocoinstallations =========================
    else if "chocoinstallations" in [tags] {
        mutate {
            gsub => [
            "[message]", "[\u0000-\u001F]", "",
            "[message]", "'", "\\'",
            "[message]", "[\n]", "\\n",
            "[message]", "\[\"", "[",
            "[message]", "\"\]", "]",
            "message", "\",\"", "virgule",
            "message", "\":\"", "doublepoint",
            "message", "{\"", "bracket",
                "message", "\"}", "counterbcket",
            "[message]", "\"", "",
            "message", "virgule", "\",\"",
            "message", "doublepoint", "\":\"",
            "message", "bracket", "{\"",
                "message", "counterbcket", "\"}",
            "[message]", "[\\]", ""
            ]
        }
        json {
            source => "message"
            target => "json"
            add_tag => [ "json_parse_success" ]
            tag_on_failure => [ "json_parse_error" ]
        }
        if "json_parse_success" in [tags] {
            mutate {
                rename => {
                    "[json][Name]" => "[Package.Choco.Name]"
                    "[json][Version]" => "[Package.Choco.Version]"
                    "[json][Action]" => "[Package.Choco.Action]"
                    "[json][Level]" => "[Package.Choco.Level]"
                    "[json][Result]" => "[Package.Choco.Result]"
                    "[json][Message]" => "[Package.Choco.Message]"
                    "[json][Timestamp]" => "[Package.Choco.Timestamp]"
                    "[json][ComputerName]" => "[Computer.Name]"
                    "[json][ComputerType]" => "[Computer.Type]"
                    "[json][CustomerCode]" => "[Customer.Code]"
                    "[json][Domain]" => "[Domain.Netbios]"
                    "[json][SourceName]" => "[Package.Choco.SourceName]"
                    "[json][DestinationSourceName]" => "[Package.Choco.DestinationSourceName]"
                    "[json][Interval]" => "[Package.Choco.Interval]"
                    "[json][User]" => "[Package.Choco.User]"
                    "[json][OTAP]" => "[Package.Choco.OTAP]"
                }
            }
        }
        fingerprint {
            source => "message"
            target => "[@metadata][fingerprint]"
            method => "SHA1"
        }
        de_dot { nested => "true" }
        prune {
            blacklist_names => [
            "@version", "agent.*", "ecs.*", "fields.*",
            "log.*", "input.*", "message"
            ]
        }
    }
    else if "chocoautomations" in [tags] {
        mutate {
            gsub => [
            "[message]", "'", "\\'",
            "[message]", "[\n]", "\\n",
            "[message]", "\[\"", "[",
            "[message]", "\"\]", "]",
            "message", "\",\"", "virgule",
            "message", "\":\"", "doublepoint",
            "message", "{\"", "bracket",
                "message", "\"}", "counterbcket",
            "[message]", "\"", "",
            "message", "virgule", "\",\"",
            "message", "doublepoint", "\":\"",
            "message", "bracket", "{\"",
                "message", "counterbcket", "\"}",
            "[message]", "[\\]", ""
            ]
        }
        json {
            source => "message"
            target => "json"
            add_tag => [ "json_parse_success" ]
            tag_on_failure => [ "json_parse_error" ]
        }
        if "json_parse_success" in [tags] {
            mutate {
                rename => {
                    "[json][Name]" => "[Package.Choco.Name]"
                    "[json][Version]" => "[Package.Choco.Version]"
                    "[json][Action]" => "[Package.Choco.Action]"
                    "[json][Level]" => "[Package.Choco.Level]"
                    "[json][Result]" => "[Package.Choco.Result]"
                    "[json][Message]" => "[Package.Choco.Message]"
                    "[json][Timestamp]" => "[Package.Choco.Timestamp]"
                    "[json][ComputerName]" => "[Computer.Name]"
                    "[json][ComputerType]" => "[Computer.Type]"
                    "[json][CustomerCode]" => "[Customer.Code]"
                    "[json][Domain]" => "[Domain.Netbios]"
                    "[json][SourceName]" => "[Package.Choco.SourceName]"
                    "[json][DestinationSourceName]" => "[Package.Choco.DestinationSourceName]"
                    "[json][Interval]" => "[Package.Choco.Interval]"
                    "[json][User]" => "[Package.Choco.User]"
                    "[json][OTAP]" => "[Package.Choco.OTAP]"
                }
            }
        }
        fingerprint {
            source => "message"
            target => "[@metadata][fingerprint]"
            method => "SHA1"
        }
        de_dot { nested => "true" }
        prune {
            blacklist_names => [
            "@version", "agent.*", "ecs.*", "fields.*",
            "log.*", "input.*", "message"
            ]
        }
    }
}

output {
    if "logstashplainlog" in [tags] or "logstashpipelinelog" in [tags] {
        stdout { codec => "rubydebug"
            elasticsearch {
                hosts => "https://prd-monitoring-es.central.wpol.nl:9243"
                manage_template => false
                index => "%{[@metadata][beat]}-%{[@metadata][version]}-%{+YYYY.MM.dd}"
                user => "big_logstash_writer"
                password => "${BIG_LOGSTASH_WRITER_PWD}"
                ssl_verification_mode => "full"
                ssl_enabled => true
                ssl_certificate_authorities => ["D:/Certificate/rootca.man.wpol.nl.cer"]
                action => "index"
                ilm_enabled => true
                ilm_policy => "logstash_logfiles_delete_after_30d"
                data_stream => false
                ecs_compatibility => disabled
            }
        }
        if "externalip" in [tags] {
            elasticsearch {
                id => "externalip"
                hosts => ["https://f98ab1efe8f04a5089e5844b01da330f.central.wpol.nl:9243"]
                user => "big_logstash_writer"
                password => "${BIG_LOGSTASH_WRITER_PWD}"
                ssl_verification_mode => "full"
                ssl_enabled => true
                ssl_certificate_authorities => ["D:/Certificate/rootca.man.wpol.nl.cer"]
                index => "externalip-%{+YYYY.MM.dd}"
                document_id => "%{[@metadata][fingerprint]}"
                action => "index"
                manage_template => false
            }
        }
        if "citrixlicense" in [tags] {
            elasticsearch {
                id => "PRD-Applications-And-Desktops-CitrixLicense"
                hosts => ["https://f98ab1efe8f04a5089e5844b01da330f.central.wpol.nl:9243"]
                user => "big_logstash_writer"
                password => "${BIG_LOGSTASH_WRITER_PWD}"
                ssl_verification_mode => "full"
                ssl_enabled => true
                ssl_certificate_authorities => ["D:/Certificate/rootca.man.wpol.nl.cer"]
                index => "citrixlicenseinfo-%{+YYYY.MM}"
                document_id => "%{[@metadata][fingerprint]}"
                action => "index"
                manage_template => false
            }
        }
        if "softwareinventory" in [tags] {
            elasticsearch {
                id => "PRD-Applications-And-Desktops-SoftwareInventory"
                hosts => ["https://f98ab1efe8f04a5089e5844b01da330f.central.wpol.nl:9243"]
                user => "big_logstash_writer"
                password => "${BIG_LOGSTASH_WRITER_PWD}"
                ssl_verification_mode => "full"
                ssl_enabled => true
                ssl_certificate_authorities => ["D:/Certificate/rootca.man.wpol.nl.cer"]
                index => "softwareinventory-%{+YYYY.MM}"
                document_id => "%{[@metadata][fingerprint]}"
                action => "index"
                manage_template => false
            }
        }
        if "dfs" in [tags] {
            elasticsearch {
                id => "PRD-BackBone_DFSData"
                hosts => ["https://49500b7ea05c4ec3be3f4f126e89d615.central.wpol.nl:9243/"]
                user => "big_logstash_writer"
                password => "${BIG_LOGSTASH_WRITER_PWD}"
                index => "dfs-%{+YYYY.MM}"
                ssl_verification_mode => "full"
                ssl_enabled => true
                ssl_certificate_authorities => ["D:/Certificate/rootca.man.wpol.nl.cer"]
                document_id => "%{[@metadata][fingerprint]}"
                action => "index"
                manage_template => false
            }
        }
        if "rolefoldersize" in [tags] {
            elasticsearch {
                id => "PRD-BackBone_Rolefoldersize"
                hosts => ["https://49500b7ea05c4ec3be3f4f126e89d615.central.wpol.nl:9243/"]
                user => "big_logstash_writer"
                password => "${BIG_LOGSTASH_WRITER_PWD}"
                ssl_verification_mode => "full"
                ssl_enabled => true
                ssl_certificate_authorities => ["D:/Certificate/rootca.man.wpol.nl.cer"]
                index => "rolefoldersize-%{+YYYY.MM}"
                document_id => "%{[@metadata][fingerprint]}"
                action => "index"
                manage_template => false
            }
        }
        if "wsus" in [tags] {
            elasticsearch {
                id => "PRD-BackBone-WSUSMissingUpdates"
                hosts => ["https://49500b7ea05c4ec3be3f4f126e89d615.central.wpol.nl:9243/"]
                user => "big_logstash_writer"
                password => "${BIG_LOGSTASH_WRITER_PWD}"
                ssl_verification_mode => "full"
                ssl_enabled => true
                ssl_certificate_authorities => ["D:/Certificate/rootca.man.wpol.nl.cer"]
                index => "wsusmissingupdates-%{+YYYY.MM}"
                document_id => "%{[@metadata][fingerprint]}"
                action => "index"
                manage_template => false
            }
        }
        if "vss" in [tags] {
            elasticsearch {
                id => "PRD-BackBone-VSS"
                hosts => ["https://49500b7ea05c4ec3be3f4f126e89d615.central.wpol.nl:9243/"]
                user => "big_logstash_writer"
                password => "${BIG_LOGSTASH_WRITER_PWD}"
                ssl_verification_mode => "full"
                ssl_enabled => true
                ssl_certificate_authorities => ["D:/Certificate/rootca.man.wpol.nl.cer"]
                index => "vss-%{+YYYY.MM}"
                document_id => "%{[@metadata][fingerprint]}"
                action => "index"
                manage_template => false
            }
        }
        if "fsinventory" in [tags] {
            elasticsearch {
                id => "PRD-BackBone-FSInventory"
                hosts => ["https://49500b7ea05c4ec3be3f4f126e89d615.central.wpol.nl:9243/"]
                user => "big_logstash_writer"
                password => "${BIG_LOGSTASH_WRITER_PWD}"
                ssl_verification_mode => "full"
                ssl_enabled => true
                ssl_certificate_authorities => ["D:/Certificate/rootca.man.wpol.nl.cer"]
                index => "fsinventory-%{+YYYY.MM}"
                document_id => "%{[@metadata][fingerprint]}"
                action => "index"
                manage_template => false
            }
        }
        if "vmwareclustercapacity" in [tags] {
            elasticsearch {
                id => "PRD-Backbone-vmwareclustercapacity"
                hosts => ["https://49500b7ea05c4ec3be3f4f126e89d615.central.wpol.nl:9243/"]
                user => "big_logstash_writer"
                password => "${BIG_LOGSTASH_WRITER_PWD}"
                ssl_verification_mode => "full"
                ssl_enabled => true
                ssl_certificate_authorities => ["D:/Certificate/rootca.man.wpol.nl.cer"]
                index => "vmwareclustercapacity-%{+YYYY.MM}"
                action => "index"
                manage_template => false
            }
        }
        if "ntfsrights" in [tags] {
            elasticsearch {
                id => "PRD-BackBone-NTFSrights"
                hosts => ["https://49500b7ea05c4ec3be3f4f126e89d615.central.wpol.nl:9243/"]
                user => "big_logstash_writer"
                password => "${BIG_LOGSTASH_WRITER_PWD}"
                ssl_verification_mode => "full"
                ssl_enabled => true
                ssl_certificate_authorities => ["D:/Certificate/rootca.man.wpol.nl.cer"]
                index => "ntfsrights-%{+YYYY.MM}"
                document_id => "%{[@metadata][fingerprint]}"
                action => "index"
                manage_template => false
            }
        }
        if "vmwarehostinfo" in [tags] {
            elasticsearch {
                id => "PRD-Backbone-vmwarehostinfo"
                hosts => ["https://49500b7ea05c4ec3be3f4f126e89d615.central.wpol.nl:9243/"]
                user => "big_logstash_writer"
                password => "${BIG_LOGSTASH_WRITER_PWD}"
                ssl_verification_mode => "full"
                ssl_enabled => true
                ssl_certificate_authorities => ["D:/Certificate/rootca.man.wpol.nl.cer"]
                index => "vmwarehostinfo-%{+YYYY.MM}"
                document_id => "%{[@metadata][fingerprint]}"
                action => "index"
                manage_template => false
            }
        }
        if "vmwarevminfo" in [tags] {
            elasticsearch {
                id => "PRD-Backbone-vmwarevminfo"
                hosts => ["https://49500b7ea05c4ec3be3f4f126e89d615.central.wpol.nl:9243/"]
                user => "big_logstash_writer"
                password => "${BIG_LOGSTASH_WRITER_PWD}"
                ssl_verification_mode => "full"
                ssl_enabled => true
                ssl_certificate_authorities => ["D:/Certificate/rootca.man.wpol.nl.cer"]
                index => "vmwarevminfo-%{+YYYY.MM}"
                document_id => "%{[@metadata][fingerprint]}"
                action => "index"
                manage_template => false
            }
        }
        if "haveibeenguessed" in [tags] {
            elasticsearch {
                id => "PRD-Password-haveibeenguessed"
                hosts => ["https://prd-password-es.central.wpol.nl:9243"]
                user => "big_logstash_writer"
                password => "${BIG_LOGSTASH_WRITER_PWD}"
                ssl_verification_mode => "full"
                ssl_enabled => true
                ssl_certificate_authorities => ["D:/Certificate/rootca.man.wpol.nl.cer"]
                index => "haveibeenguessed"
                document_id => "%{[@metadata][fingerprint]}"
                action => "index"
                manage_template => false
            }
        }
        if "chocoautomations" in [tags] {
            elasticsearch {
                id => "CHOCO-Automation"
                hosts => ["https://f98ab1efe8f04a5089e5844b01da330f.central.wpol.nl:9243"]
                user => "big_logstash_writer"
                password => "${BIG_LOGSTASH_WRITER_PWD}"
                ssl_verification_mode => "full"
                ssl_enabled => true
                ssl_certificate_authorities => ["D:/Certificate/rootca.man.wpol.nl.cer"]
                index => "chocoautomations-%{+YYYY.MM.dd}"
                document_id => "%{[@metadata][fingerprint]}"
                action => "index"
                manage_template => false
            }
        }
        if "chocoinstallations" in [tags] {
            elasticsearch {
                id => "CHOCO-Installation"
                hosts => ["https://f98ab1efe8f04a5089e5844b01da330f.central.wpol.nl:9243"]
                user => "big_logstash_writer"
                password => "${BIG_LOGSTASH_WRITER_PWD}"
                ssl_verification_mode => "full"
                ssl_enabled => true
                ssl_certificate_authorities => ["D:/Certificate/rootca.man.wpol.nl.cer"]
                index => "chocoinstallations-%{+YYYY.MM.dd}"
                document_id => "%{[@metadata][fingerprint]}"
                manage_template => false
            }
        }
        if "chocoinstallations" in [tags] {
            elasticsearch {
                id => "CHOCO-Installation-BB"
                hosts => ["https://49500b7ea05c4ec3be3f4f126e89d615.central.wpol.nl:9243/"]
                user => "big_logstash_writer"
                password => "${BIG_LOGSTASH_WRITER_PWD}"
                ssl_verification_mode => "full"
                ssl_enabled => true
                ssl_certificate_authorities => ["D:/Certificate/rootca.man.wpol.nl.cer"]
                index => "chocoinstallations-%{+YYYY.MM.dd}"
                document_id => "%{[@metadata][fingerprint]}"}
            }
        }
    }